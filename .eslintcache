[{"/Users/ekphrasis/P_CDA/checklist_client/src/index.jsx":"1","/Users/ekphrasis/P_CDA/checklist_client/src/reportWebVitals.js":"2","/Users/ekphrasis/P_CDA/checklist_client/src/App.jsx":"3","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Homepage.jsx":"4","/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/SignButton.jsx":"5","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Signup.jsx":"6","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Signin.jsx":"7","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/WelcomeTopIcon.jsx":"8","/Users/ekphrasis/P_CDA/checklist_client/src/components/customedhooks/usePasswordToggle.jsx":"9","/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/SignButtonDivider.jsx":"10","/Users/ekphrasis/P_CDA/checklist_client/src/components/customedhooks/useForm.jsx":"11","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateSignup.jsx":"12","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateSignin.jsx":"13","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/auth.js":"14","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/index.js":"15","/Users/ekphrasis/P_CDA/checklist_client/src/actions/index.js":"16","/Users/ekphrasis/P_CDA/checklist_client/src/components/common/PublicRoute.jsx":"17","/Users/ekphrasis/P_CDA/checklist_client/src/components/common/PrivateRoute.jsx":"18","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Dashboard.jsx":"19","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Navbar.jsx":"20","/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/AddItemButton.jsx":"21","/Users/ekphrasis/P_CDA/checklist_client/src/store.js":"22","/Users/ekphrasis/P_CDA/checklist_client/src/actions/auth.js":"23","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Alerts.jsx":"24","/Users/ekphrasis/P_CDA/checklist_client/src/actions/messages.js":"25","/Users/ekphrasis/P_CDA/checklist_client/src/actions/types.js":"26","/Users/ekphrasis/P_CDA/checklist_client/src/actions/tasks.js":"27","/Users/ekphrasis/P_CDA/checklist_client/src/actions/lists.js":"28","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/EditTaskModal.jsx":"29","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/EditListModal.jsx":"30","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateEditList.jsx":"31","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/lists.js":"32","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/tasks.js":"33","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/errors.js":"34","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/messages.js":"35","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/NavbarModal.jsx":"36","/Users/ekphrasis/P_CDA/checklist_client/src/components/EditList.jsx":"37","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateAddItem.jsx":"38","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/List.jsx":"39","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Task.jsx":"40","/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/AddTaskButton.jsx":"41","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateAddTask.jsx":"42","/Users/ekphrasis/P_CDA/checklist_client/src/components/EditTask.jsx":"43","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateEditTask.jsx":"44"},{"size":521,"mtime":1613951173395,"results":"45","hashOfConfig":"46"},{"size":364,"mtime":1611920451669,"results":"47","hashOfConfig":"46"},{"size":1480,"mtime":1615313315922,"results":"48","hashOfConfig":"46"},{"size":1168,"mtime":1612273413525,"results":"49","hashOfConfig":"46"},{"size":447,"mtime":1612287288604,"results":"50","hashOfConfig":"46"},{"size":5031,"mtime":1629117430994,"results":"51","hashOfConfig":"46"},{"size":3614,"mtime":1615312739155,"results":"52","hashOfConfig":"46"},{"size":473,"mtime":1612189782008,"results":"53","hashOfConfig":"46"},{"size":524,"mtime":1612192842042,"results":"54","hashOfConfig":"46"},{"size":326,"mtime":1612200197247,"results":"55","hashOfConfig":"46"},{"size":919,"mtime":1615312739146,"results":"56","hashOfConfig":"46"},{"size":1106,"mtime":1612201061702,"results":"57","hashOfConfig":"46"},{"size":686,"mtime":1612287257443,"results":"58","hashOfConfig":"46"},{"size":1596,"mtime":1614007912426,"results":"59","hashOfConfig":"46"},{"size":312,"mtime":1613951173405,"results":"60","hashOfConfig":"46"},{"size":418,"mtime":1613951173361,"results":"61","hashOfConfig":"62"},{"size":532,"mtime":1612534452330,"results":"63","hashOfConfig":"64"},{"size":764,"mtime":1614007440311,"results":"65","hashOfConfig":"46"},{"size":7108,"mtime":1615756579823,"results":"66","hashOfConfig":"46"},{"size":1530,"mtime":1613951173385,"results":"67","hashOfConfig":"46"},{"size":3929,"mtime":1615741779914,"results":"68","hashOfConfig":"46"},{"size":383,"mtime":1613951173411,"results":"69","hashOfConfig":"46"},{"size":3068,"mtime":1615741118126,"results":"70","hashOfConfig":"46"},{"size":518,"mtime":1613951173378,"results":"71","hashOfConfig":"46"},{"size":277,"mtime":1613951173364,"results":"72","hashOfConfig":"46"},{"size":1182,"mtime":1615655310069,"results":"73","hashOfConfig":"46"},{"size":3205,"mtime":1615312739140,"results":"74","hashOfConfig":"46"},{"size":5779,"mtime":1615756113827,"results":"75","hashOfConfig":"46"},{"size":1721,"mtime":1615455845739,"results":"76","hashOfConfig":"46"},{"size":1384,"mtime":1615458803883,"results":"77","hashOfConfig":"46"},{"size":319,"mtime":1614706321061,"results":"78","hashOfConfig":"46"},{"size":5120,"mtime":1615752062258,"results":"79","hashOfConfig":"46"},{"size":1095,"mtime":1615312739158,"results":"80","hashOfConfig":"46"},{"size":359,"mtime":1613951173403,"results":"81","hashOfConfig":"46"},{"size":349,"mtime":1613951173408,"results":"82","hashOfConfig":"46"},{"size":948,"mtime":1613951173386,"results":"83","hashOfConfig":"46"},{"size":1005,"mtime":1615487890189,"results":"84","hashOfConfig":"46"},{"size":318,"mtime":1614705876412,"results":"85","hashOfConfig":"46"},{"size":4879,"mtime":1615734001216,"results":"86","hashOfConfig":"46"},{"size":1845,"mtime":1615479334055,"results":"87","hashOfConfig":"46"},{"size":4610,"mtime":1613951173373,"results":"88","hashOfConfig":"62"},{"size":590,"mtime":1613951173391,"results":"89","hashOfConfig":"62"},{"size":3440,"mtime":1615487239860,"results":"90","hashOfConfig":"46"},{"size":777,"mtime":1637850948415,"results":"91","hashOfConfig":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"etmrzs",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"yhqtet",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7zg7up",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"94"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ekphrasis/P_CDA/checklist_client/src/index.jsx",[],["197","198","199","200","201","202","203"],"/Users/ekphrasis/P_CDA/checklist_client/src/reportWebVitals.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/App.jsx",["204"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n// import { auth } from './actions/index';\nimport { loadUser } from './actions/auth';\n\nimport Homepage from './pages/Homepage';\nimport Signup from './pages/Signup';\nimport Signin from './pages/Signin';\nimport Dashboard from './pages/Dashboard';\nimport Alerts from './components/layout/Alerts';\n// import PublicRoute from './components/common/PublicRoute';\nimport PrivateRoute from './components/common/PrivateRoute';\n\nimport './styles/App.scss';\n\n// const API = process.env.REACT_APP_DEV_API_URL;\n\nconst alertOptions = {\n  timeout: 3000,\n  position: 'top center',\n};\n\nfunction App() {\n  useEffect(() => {\n    store.dispatch(loadUser());\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <AlertProvider template={AlertTemplate} {...alertOptions}>\n        <Router>\n          {/* <Alerts /> */}\n          <Switch>\n            <Route exact path=\"/\" component={Homepage} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/signin\" component={Signin} />\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n          </Switch>\n        </Router>\n      </AlertProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Homepage.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/SignButton.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/pages/Signup.jsx",["205"],"/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signup } from '../actions/auth';\n\nimport usePasswordToggle from '../components/customedhooks/usePasswordToggle';\nimport useForm from '../components/customedhooks/useForm';\nimport validate from '../components/validators/validateSignup';\nimport WelcomeTopIcon from '../components/layout/WelcomeTopIcon';\nimport SignButton from '../components/buttons/SignButton';\nimport SignButtonDivider from '../components/buttons/SignButtonDivider';\n\nconst Signup = ({ signup, auth: { isAuthenticated, token } }) => {\n  const [PasswordInputType, ToggleIcon] = usePasswordToggle();\n  const [toHome, setToHome] = useState(false);\n\n  const initialState = {\n    firstname: '',\n    lastname: '',\n    email: '',\n    password: '',\n  };\n\n  const { handleChange, handleSubmit, values, setValues, errors } = useForm(\n    initialState,\n    validate,\n    submit\n  );\n\n  async function submit() {\n    signup(values, setToHome);\n  }\n\n  // if (isAuthenticated) {\n  //   return <Redirect to=\"/signin\" />;\n  // }\n  return (\n    <>\n      {toHome ? <Redirect to=\"/signin\" /> : null}\n      <div className=\"welcome__container\">\n        <div className=\"welcome__container-leftpanel\">\n          <WelcomeTopIcon />\n          <div className=\"welcome__container-leftpanel-bottomhalf\">\n            <form\n              onSubmit={handleSubmit}\n              noValidate\n              className=\"form__container\"\n            >\n              <h2 className=\"form__container-title\">Create an account</h2>\n              <label htmlFor=\"firstname\" className=\"form__container-label\">\n                Firstname\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"firstname\"\n                    type=\"firstname\"\n                    name=\"firstname\"\n                    placeholder=\"firstname\"\n                    value={values.firstname}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                </div>\n                {errors.firstname && (\n                  <p className=\"error\">{errors.firstname}</p>\n                )}\n              </label>\n              <label htmlFor=\"lastname\" className=\"form__container-label\">\n                Lastname\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"lastname\"\n                    type=\"lastname\"\n                    name=\"lastname\"\n                    placeholder=\"lastname\"\n                    value={values.lastname}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                </div>\n                {errors.lastname && <p className=\"error\">{errors.lastname}</p>}\n              </label>\n              <label htmlFor=\"email\" className=\"form__container-label\">\n                Email\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"name@domain.com\"\n                    value={values.email}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                </div>\n                {errors.email && <p className=\"error\">{errors.email}</p>}\n              </label>\n              <label htmlFor=\"password\" className=\"form__container-label\">\n                Password\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"password\"\n                    type={PasswordInputType}\n                    name=\"password\"\n                    placeholder=\"at least 8 characters\"\n                    value={values.password}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                  <span className=\"password-toggle-icon\">{ToggleIcon}</span>\n                </div>\n                {errors.password && <p className=\"error\">{errors.password}</p>}\n              </label>\n              <span className=\"welcome__container-leftpanel-bottomhalf-buttons\">\n                <SignButton type=\"submit\" value=\"signup\">\n                  Sign up\n                </SignButton>\n                <SignButtonDivider />\n                {/* <a href=\"/signin\" className=\"signbutton__link\"> */}\n                <SignButton type=\"button\" value=\"signin\">\n                  Sign in\n                </SignButton>\n                {/* </a> */}\n              </span>\n            </form>\n          </div>\n        </div>\n        <div className=\"welcome__container-rightpanel\" />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { signup })(Signup);\n","/Users/ekphrasis/P_CDA/checklist_client/src/pages/Signin.jsx",["206","207"],"/* eslint-disable no-shadow */\nimport React, { useState, useRef } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signin } from '../actions/auth';\n\nimport usePasswordToggle from '../components/customedhooks/usePasswordToggle';\nimport useForm from '../components/customedhooks/useForm';\nimport validate from '../components/validators/validateSignin';\n\nimport WelcomeTopIcon from '../components/layout/WelcomeTopIcon';\nimport SignButton from '../components/buttons/SignButton';\nimport SignButtonDivider from '../components/buttons/SignButtonDivider';\n\nconst Signin = ({ signin, auth: { isAuthenticated } }) => {\n  const [PasswordInputType, ToggleIcon] = usePasswordToggle();\n\n  const initialState = {\n    email: '',\n    password: '',\n  };\n\n  const { handleChange, handleSubmit, values, errors } = useForm(\n    initialState,\n    validate,\n    submit\n  );\n\n  async function submit() {\n    signin(values);\n  }\n\n  if (isAuthenticated) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n  return (\n    <>\n      {/* {toHome ? <Redirect to=\"/dashboard\" /> : null} */}\n      <div className=\"welcome__container\">\n        <div className=\"welcome__container-leftpanel\">\n          <WelcomeTopIcon />\n          <div className=\"welcome__container-leftpanel-bottomhalf\">\n            <form\n              onSubmit={handleSubmit}\n              noValidate\n              className=\"form__container\"\n            >\n              <h2 className=\"form__container-title\">Welcome back</h2>\n              <label htmlFor=\"email\" className=\"form__container-label\">\n                Email\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"name@domain.com\"\n                    value={values.email}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                </div>\n                {errors.email && <p className=\"error\">{errors.email}</p>}\n              </label>\n              <label htmlFor=\"password\" className=\"form__container-label\">\n                Password\n                <span className=\"required\">*</span>\n                <div>\n                  <input\n                    id=\"password\"\n                    type={PasswordInputType}\n                    name=\"password\"\n                    placeholder=\"at least 8 characters\"\n                    value={values.password}\n                    onChange={handleChange}\n                    className=\"form__container-input\"\n                  />\n                  <span className=\"password-toggle-icon\">{ToggleIcon}</span>\n                </div>\n                {errors.password && <p className=\"error\">{errors.password}</p>}\n              </label>\n              <span className=\"welcome__container-leftpanel-bottomhalf-buttons\">\n                <SignButton type=\"submit\" value=\"signin\">\n                  Sign in\n                </SignButton>\n                <SignButtonDivider />\n                <SignButton type=\"button\" value=\"signup\">\n                  Sign up\n                </SignButton>\n              </span>\n            </form>\n          </div>\n        </div>\n        <div className=\"welcome__container-rightpanel\" />\n      </div>\n    </>\n  );\n};\n\n// Signin.propTypes = {\n//   signin: PropTypes.func.isRequired,\n//   isAuthenticated: PropTypes.bool,\n// };\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { signin })(Signin);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/WelcomeTopIcon.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/customedhooks/usePasswordToggle.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/SignButtonDivider.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/customedhooks/useForm.jsx",["208"],"import { useState, useEffect } from 'react';\n\nconst useForm = (initialState, validate, callback) => {\n  const [values, setValues] = useState(initialState);\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const clearState = () => {\n    setValues({ ...initialState });\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setValues({\n      ...values,\n    });\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors, isSubmitting]);\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    setValues,\n    errors,\n    clearState,\n  };\n};\n\nexport default useForm;\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateSignup.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateSignin.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/reducers/auth.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/reducers/index.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/actions/index.js",[],["209","210","211","212","213","214","215"],"/Users/ekphrasis/P_CDA/checklist_client/src/components/common/PublicRoute.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/common/PrivateRoute.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/pages/Dashboard.jsx",["216","217","218"],"/* eslint-disable no-shadow */\n/* eslint-disable camelcase */\n/* eslint-disable no-constant-condition */\n/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nimport { getLists, getListsTasks, sortItems } from '../actions/lists';\nimport { getTasks } from '../actions/tasks';\n\n// import useForm from '../components/customedhooks/useForm';\n// import validate from '../components/validators/validateEditList';\n\nimport List from '../components/layout/List';\nimport Navbar from '../components/layout/Navbar';\nimport AddItemButton from '../components/buttons/AddItemButton';\n\nconst Dashboard = ({\n  getLists,\n  getListsTasks,\n  sortItems,\n  getTasks,\n  auth,\n  onlyLists,\n  lists,\n  tasks,\n}) => {\n  // console.log('authenticated user', auth.user.id);\n  // console.log('tasks from dashboard', tasks);\n  // console.log('lists from dashboard', lists[0]);\n\n  async function onDragEnd(result) {\n    const { destination, source, draggableId, type } = result;\n\n    console.log('ledraggableId', draggableId);\n\n    console.log('result jean pierre', result);\n\n    if (!destination) {\n      console.log('not dropped in droppable');\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      console.log('dropped in the same place');\n      return;\n    }\n    const droppableIdStart = source.droppableId;\n    const droppableIdEnd = destination.droppableId;\n    const droppableIndexStart = source.index;\n    const droppableIndexEnd = destination.index;\n    // console.log('droppableIdEnd', droppableIdEnd);\n\n    console.log('ptit test currentList', lists[droppableIndexStart]);\n\n    const currentList = lists[droppableIndexStart];\n\n    const {\n      user_id,\n      id,\n      name,\n      rank,\n      Tasks,\n      createdAt,\n      updatedAt,\n    } = currentList;\n\n    const updatedList = {\n      user_id,\n      list_id: id,\n      name,\n      rank: droppableIndexEnd,\n      Tasks,\n      createdAt,\n      updatedAt,\n    };\n\n    console.log('test', updatedList.rank);\n    // move list\n    sortItems(\n      {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type,\n      },\n      updatedList,\n      lists\n    );\n\n    // sort(\n    //   source.droppableId,\n    //   destination.droppableId,\n    //   source.index,\n    //   destination.index,\n    //   draggableId,\n    //   type\n    // );\n  }\n\n  useEffect(() => {\n    getLists(auth.user.id);\n    getListsTasks(auth.user.id);\n    getTasks();\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"dashboard__container\">\n          <h2>\n            {auth.user.firstname}\n            &apos;s Board\n          </h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {(provided) => (\n              <>\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"dashboard__container-lists\"\n                >\n                  {lists\n                    // .sort((a, b) => (a.rank > b.rank ? 1 : -1))\n                    .map((list, index) => (\n                      <List key={list.id} list={list} index={index} />\n                    ))}\n                  {provided.placeholder}\n                  <div className=\"dashboard__container-lists-addlist-inside\">\n                    <AddItemButton text=\"list\">list</AddItemButton>\n                  </div>\n                </div>\n                <div className=\"dashboard__container-lists-addlist-outside\">\n                  <AddItemButton text=\"list\">list</AddItemButton>\n                </div>\n              </>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    </>\n  );\n};\n\n// const List = ({ list, editList }) => {\n//   const { id, name } = list;\n//   const modalRef = useRef();\n\n//   const openModal = () => {\n//     modalRef.current.openModal();\n//   };\n\n//   const [toggle, setToggle] = useState(true);\n//   // const [text, setText] = useState(task.name);\n//   // useEffect(() => {\n//   //   getTasks();\n//   //   console.log('inside', list.id);\n//   // }, []);\n//   // console.log('kiwi', list.id);\n\n//   function toggleInput() {\n//     setToggle(false);\n//   }\n\n//   const initialState = {\n//     name: '' ? '' : name,\n//   };\n\n//   const { handleChange, handleSubmit, values, setValues, errors } = useForm(\n//     initialState,\n//     validate,\n//     submitEditList\n//   );\n\n//   async function submitEditList() {\n//     editList({ list_id: list.id, name: values.name });\n//   }\n\n//   console.log('list', list);\n//   return (\n//     <>\n//       <div className=\"dashboard__container-lists-list\">\n//         <div className=\"dashboard__container-lists-list-header\">\n//           <h3>{list.name}</h3>\n//           {/* {toggle ? (\n//             <h3 onDoubleClick={toggleInput}>{list.name}</h3>\n//           ) : (\n//             <form className=\"edit-listname-container-form\">\n//               <input\n//                 type=\"text\"\n//                 id=\"name\"\n//                 name=\"name\"\n//                 value={values.name || ''}\n//                 onChange={handleChange}\n//                 onBlur={handleSubmit}\n//                 onKeyDown={handleSubmit}\n//               />\n//             </form>\n//           )}\n//           {errors.name && <p className=\"error\">{errors.name}</p>} */}\n//           <FontAwesomeIcon\n//             icon={faEllipsisH}\n//             nature=\"ellipse\"\n//             onMouseDown={openModal}\n//           />\n//           <EditListModal ref={modalRef} listId={list.id} />\n//         </div>\n//         {list.Tasks.map((task, i) => (\n//           <Task key={i} task={task} />\n//         ))}\n//         <AddItemButton text=\"task\">task</AddItemButton>\n//       </div>\n//     </>\n//   );\n// };\n\n// const Task = (Tasks) => {\n//   const modalRef = useRef();\n//   console.log('ya quoi dans task', Tasks);\n\n//   const openModal = () => {\n//     modalRef.current.openModal();\n//   };\n//   return (\n//     <div className=\"dashboard__container-lists-list-card\">\n//       <div className=\"dashboard__container-lists-list-card-header\">\n//         <h3>{Tasks.task.name}</h3>\n//         <FontAwesomeIcon\n//           icon={faPenNib}\n//           nature=\"pen\"\n//           onClick={openModal}\n//           className=\"dashboard__container-lists-list-card-header-edit\"\n//         />\n//         <EditTaskModal ref={modalRef} />\n//       </div>\n//       <div className=\"dashboard__container-lists-list-card-description\">\n//         <p>{Tasks.task.description}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\nconst mapStateToProps = (state, droppableIdStart) => ({\n  auth: state.auth,\n  // tasks: state.tasks.tasks,\n  lists: state.lists.lists,\n  onlyLists: state.lists.onlyLists,\n});\n\nexport default connect(mapStateToProps, {\n  getLists,\n  getListsTasks,\n  getTasks,\n  sortItems,\n})(Dashboard);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Navbar.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/AddItemButton.jsx",["219","220"],"/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Textarea from 'react-textarea-autosize';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport useForm from '../customedhooks/useForm';\nimport validate from '../validators/validateAddItem';\nimport { addList } from '../../actions/lists';\nimport { addTask } from '../../actions/tasks';\n\nconst AddItemButton = ({\n  listId,\n  list,\n  text,\n  children,\n  addList,\n  addTask,\n  auth,\n  messages,\n}) => {\n  const [formOpen, setFormOpen] = useState(false);\n\n  // console.log('eeasy', messages);\n\n  const open = () => {\n    setFormOpen(true);\n  };\n\n  const close = () => {\n    setFormOpen(false);\n  };\n\n  const buttonTextOpacity = text === 'list' ? 1 : 0.5;\n  const buttonTextColor = text === 'list' ? 'white' : 'inherit';\n  const buttonTextBackground = text === 'list' ? '#eeeeee' : 'inherit';\n\n  const placeholder =\n    text === 'list' ? 'Enter new list name' : 'Enter new task name';\n\n  const buttonTitle = text === 'list' ? 'Add List' : 'Add Task';\n\n  // const addListP = addList({ user_id: auth.user.id, name: values.name });\n\n  // const addTaskP = addTask({\n  //   user_id: auth.user.id,\n  //   name: values.name,\n  //   description: 'Description à compléter',\n  //   priority_id: 3,\n  //   list_id: listId,\n  // });\n\n  const initialState = {\n    name: '',\n  };\n\n  const { handleChange, handleSubmit, values, errors, clearState } = useForm(\n    initialState,\n    validate,\n    submit\n  );\n\n  const valueButton = text === 'list' ? 'addList' : 'addTask';\n\n  async function submit() {\n    {\n      (text === 'list'\n        ? addList({ user_id: auth.user.id, name: values.name, rank: 100 })\n        : addTask(\n            {\n              user_id: auth.user.id,\n              name: values.name,\n              description: 'Description à compléter',\n              priority_id: 3,\n              list_id: listId,\n              rank: 100,\n            },\n            list\n          )\n      ).then(clearState);\n    }\n  }\n\n  return (\n    <div\n      style={{\n        opacity: buttonTextOpacity,\n        color: buttonTextColor,\n        background: buttonTextBackground,\n      }}\n      className=\"add-item-background\"\n    >\n      <div className=\"add-item-container\">\n        {formOpen ? (\n          <form\n            onSubmit={handleSubmit}\n            noValidate\n            className=\"add-item-container-form\"\n          >\n            <Textarea\n              placeholder={placeholder}\n              autoFocus\n              className=\"add-item-container-form-input\"\n              onChange={handleChange}\n              // onBlur={close}\n              value={values.name || ''}\n              name=\"name\"\n              id=\"id\"\n              type=\"text\"\n            />\n            {errors.name && <p className=\"error\">{errors.name}</p>}\n            <button\n              type=\"submit\"\n              // value=\"addList\"\n              value={valueButton}\n              className=\"add-item-form-button\"\n              // onClick={() => refreshPage()}\n            >\n              {buttonTitle}\n            </button>\n            <FontAwesomeIcon\n              className=\"add-item-container-form-cross\"\n              icon={faTimes}\n              onMouseDown={close}\n            />\n          </form>\n        ) : (\n          <div className=\"add-item-button\">\n            <button className=\"add-item-buttons\" type=\"button\" onClick={open}>\n              <FontAwesomeIcon icon={faPlus} />\n              &nbsp; Add a new&nbsp;\n              {children}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  messages: state.messages.state,\n});\n\nexport default connect(mapStateToProps, { addList, addTask })(AddItemButton);\n","/Users/ekphrasis/P_CDA/checklist_client/src/store.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/actions/auth.js",["221"],"/* eslint-disable dot-notation */\n// all HTTP REQ\nimport axios from 'axios';\nimport { returnErrors } from './messages';\n\nimport {\n  SIGNUP_SUCCESS,\n  SIGNIN_SUCCESS,\n  AUTH_FORM_FAIL,\n  SIGNOUT_SUCCESS,\n  GET_ERRORS,\n  USER_LOADING,\n  USER_LOADED,\n  AUTH_ERROR,\n  CLEAR_LISTS,\n} from './types';\n\nconst API = process.env.REACT_APP_DEV_API_URL;\n\n// CHECK TOKEN & LOAD USER\nexport const loadUser = () => async (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(`${API}auth/user`, tokenConfig(getState))\n    .then((res) => {\n      dispatch({ type: USER_LOADED, payload: res.data });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_ERROR });\n    });\n};\n\n// SIGNUP USER\nexport const signup = (userData, setToHome) => async (dispatch) => {\n  console.log('data from signup form', userData);\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify(userData);\n  console.log('data from signup form into body', body);\n\n  axios\n    .post(`${API}signup`, body, config)\n    .then((res) => {\n      dispatch({ type: SIGNUP_SUCCESS, payload: res.data });\n      setTimeout(() => setToHome(true), 1000);\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_FORM_FAIL });\n    });\n};\n\n//  SIGNIN USER\nexport const signin = (userData) => (dispatch) => {\n  console.log('data from signin form', userData);\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify(userData);\n  console.log('data from signin form into body', body);\n\n  axios\n    .post(`${API}signin`, body, config)\n    .then((res) => {\n      dispatch({ type: SIGNIN_SUCCESS, payload: res.data });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_FORM_FAIL });\n    });\n};\n\n// //  SIGNOUT USER\n// export const signout = () => async (dispatch, getState) => {\n//   axios\n//     .post(`${API}signout`, null, tokenConfig(getState))\n//     .then((res) => {\n//       dispatch({ type: CLEAR_LISTS });\n//       dispatch({ type: SIGNOUT_SUCCESS });\n//     })\n//     .catch((err) => {\n//       dispatch(returnErrors(err.response.data, err.response.status));\n//     });\n// };\n\n//  SIGNOUT USER\nexport const signout = () => async (dispatch) => {\n  dispatch({ type: CLEAR_LISTS });\n  dispatch({ type: SIGNOUT_SUCCESS });\n};\n\n// TOKEN CONFIG - HELPER FUNCTION\nexport const tokenConfig = (getState) => {\n  // Get token from state\n  const { token } = getState().auth;\n  // console.log('es el token', token);\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  // console.log('configuuu', config);\n  return config;\n};\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Alerts.jsx",["222"],"import React, { useEffect } from 'react';\nimport { withAlert } from 'react-alert';\nimport { connect } from 'react-redux';\n\nconst Alerts = ({ error, alert, message }) => {\n  console.log('titit', error);\n  if (error) {\n    if (error.msg) alert.error('There is an error');\n  }\n  // useEffect(() => {\n  //   alert.show('Alert Works');\n  // }, []);\n  return <></>;\n};\nconst mapStateToProps = (state) => ({\n  error: state.errors,\n  message: state.messages,\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","/Users/ekphrasis/P_CDA/checklist_client/src/actions/messages.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/actions/types.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/actions/tasks.js",["223","224"],"/* eslint-disable no-shadow */\nimport axios from 'axios';\nimport { createMessage, returnErrors } from './messages';\nimport { tokenConfig } from './auth';\n\nimport {\n  EDIT_LIST,\n  GET_TASKS,\n  ADD_TASK,\n  EDIT_TASK,\n  EDIT_LIST_TASK,\n  DELETE_TASK,\n  DELETE_LIST_TASK,\n  CLEAR_TASKS,\n  POST_ERROR,\n} from './types';\n\nconst API = process.env.REACT_APP_DEV_API_URL;\n\n// GET ONLY TASKS FROM AN USER\nexport const getTasks = () => async (dispatch, getState) => {\n  axios\n    .get(`${API}tasks`, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: GET_TASKS,\n        payload: res.data,\n      });\n    })\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\nexport const addTask = (task, list) => async (dispatch, getState) => {\n  const { Tasks } = list;\n  console.log('data from addtaskform', task);\n  console.log('list from addtaskfrom', list);\n  // Request Body\n  const body = JSON.stringify(task);\n  console.log('data from addtask into body', body);\n  axios\n    .post(`${API}tasks`, body, tokenConfig(getState))\n    .then((res) => {\n      console.log('dispatch addTask', res.data);\n      const newTask = { ...list, Tasks: [...Tasks, res.data] };\n      console.log('test newTask', newTask);\n      dispatch({\n        type: ADD_TASK,\n        payload: res.data,\n      });\n      dispatch({\n        type: EDIT_LIST_TASK,\n        payload: newTask,\n      });\n      dispatch(createMessage({ addList: 'Task Added' }));\n    })\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n// EDIT TASK\nexport const editTask = (task, list) => async (dispatch, getState) => {\n  const { Tasks } = list;\n  console.log('task from edittaskform', task);\n  console.log('list from edittaskform', list);\n  // Request Body\n  const body = JSON.stringify(task);\n\n  axios\n    .patch(`${API}tasks`, body, tokenConfig(getState))\n    .then((res) => {\n      const updatedTask = { ...list, Tasks: [...Tasks, res.data] };\n      console.log('test updatedTask', updatedTask);\n      dispatch({\n        type: EDIT_TASK,\n        payload: res.data,\n      });\n      dispatch({\n        type: EDIT_LIST,\n        payload: updatedTask,\n      });\n      dispatch(createMessage({ addList: 'Task Updated' }));\n    })\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n// DELETE TASK\nexport const deleteTask = (id, task, list) => (dispatch, getState) => {\n  const { Tasks } = list;\n  const { token } = getState().auth;\n  console.log('rdv de la task id', id);\n\n  axios\n    .delete(`${API}tasks`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data: { id },\n    })\n    .then((res) => {\n      console.log('dispatch deleteTask', res.data);\n      const deletedTask = { ...list, Tasks: [...Tasks], id };\n      dispatch(createMessage({ deleteTask: 'Task Deleted' }));\n      dispatch({\n        type: DELETE_TASK,\n        payload: id,\n      });\n      dispatch({\n        type: DELETE_LIST_TASK,\n        payload: deletedTask,\n      });\n    })\n    .catch((err) =>\n      // dispatch(returnErrors(err.response.data, err.response.status))\n      console.log('deleteTask', err)\n    );\n};\n","/Users/ekphrasis/P_CDA/checklist_client/src/actions/lists.js",["225","226","227","228","229"],"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport { createMessage, returnErrors } from './messages';\nimport { tokenConfig } from './auth';\n\nimport {\n  GET_LISTS,\n  GET_LISTSTASKS,\n  ADD_LIST,\n  EDIT_LIST,\n  EDIT_LIST_TASK,\n  EDIT_MOVED_LIST,\n  DELETE_LIST,\n  CLEAR_LISTS,\n  POST_ERROR,\n  DRAG_HAPPENED,\n} from './types';\n\nconst API = process.env.REACT_APP_DEV_API_URL;\n\n// GET ALL THE LISTS OF AN USER\nexport const getLists = (userId) => async (dispatch, getState) => {\n  axios\n    .post(`${API}onlylists`, { user_id: userId }, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: GET_LISTS,\n        payload: res.data,\n      });\n    })\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n// GET ALL THE LISTS + CORRESPONDING TASKS OF AN USER\nexport const getListsTasks = (userId) => async (dispatch, getState) => {\n  console.log('your eyes', userId);\n\n  // const body = JSON.stringify(userId);\n  // console.log('do you believe it', body);\n  axios\n    .post(`${API}liststasks`, { user_id: userId }, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: GET_LISTSTASKS,\n        payload: res.data,\n      });\n    })\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n// ADD LIST\nexport const addList = (list) => async (dispatch, getState) => {\n  console.log('data from addlist form', list);\n\n  // const { user_id, name, Tasks } = list;\n\n  // console.log('userId', Tasks);\n\n  // Request Body\n  const body = JSON.stringify(list);\n  // console.log('data from addlist into body', body);\n\n  axios\n    .post(`${API}lists`, body, tokenConfig(getState))\n    .then((res) => {\n      // console.log('dispatch addList', res.data);\n      const newList = { ...res.data, Tasks: [] };\n      // console.log('tututut', newList);\n      dispatch(createMessage({ addList: 'List Added' }));\n      dispatch({\n        type: ADD_LIST,\n        payload: newList,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n// EDIT LIST\nexport const editList = (list) => (dispatch, getState) => {\n  console.log('data list from edit list form', list);\n\n  // Request Body\n  const body = JSON.stringify(list);\n  console.log('data from edit list form into body', body);\n\n  axios\n    .patch(`${API}lists`, body, tokenConfig(getState))\n    .then((res) => {\n      console.log('dispatch editList', res.data);\n      const editedList = { ...res.data, Tasks: [] };\n      console.log('tututut', editedList);\n      dispatch(createMessage({ editList: 'List Updated' }));\n      dispatch({\n        type: EDIT_LIST,\n        payload: editedList,\n      });\n    })\n    .catch((err) =>\n      // dispatch(returnErrors(err.response.data, err.response.status))\n      console.log('editList', err)\n    );\n};\n\n// DELETE LIST\nexport const deleteList = (id) => (dispatch, getState) => {\n  const { token } = getState().auth;\n  console.log('rdv de la list id', id);\n\n  axios\n    .delete(`${API}lists`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      data: { id },\n    })\n    .then((res) => {\n      console.log('dispatch deleteList', res.data);\n      dispatch(createMessage({ deleteList: 'List Deleted' }));\n      dispatch({\n        type: DELETE_LIST,\n        payload: id,\n      });\n    })\n    .catch((err) =>\n      // dispatch(returnErrors(err.response.data, err.response.status))\n      console.log('deleteList', err)\n    );\n};\n\nexport const sortItems = (data, list, lists) => (dispatch, getState) => {\n  console.log('qeske le data', data);\n  console.log('qeske le list', list);\n  console.log('qeske les lists', lists);\n  const {\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId,\n    type,\n  } = data;\n\n  // const test = lists.splice(droppableIndexStart, 1);\n  // // lists.splice(droppableIndexEnd, 0, ...test);\n\n  // const rere = [...lists, test.lists.splice(droppableIndexEnd, 0, ...list)];\n\n  // console.log('wakanda', rere);\n\n  const { Tasks } = list;\n\n  const body = JSON.stringify(list);\n  console.log('data list from sortItems', body);\n\n  // axios\n  //   .patch(`${API}lists`, body, tokenConfig(getState))\n  //   .then((res) => {\n  //     console.log('res data sortList', res.data);\n  //     const editedList = { ...res.data, Tasks };\n  //     console.log('editedList', editedList);\n  //     dispatch(createMessage({ editList: 'List Updated' }));\n  //     // dispatch({\n  //     //   type: EDIT_LIST_TASK,\n  //     //   payload: editedList,\n  //     // });\n  //   })\n  //   .catch((err) =>\n  //     // dispatch(returnErrors(err.response.data, err.response.status))\n  //     console.log('editList', err)\n  //   );\n\n  // if (type === 'task') {\n  //   axios\n  //     .patch(`${API}tasks`, draggableId, tokenConfig(getState))\n  //     .then((res) => {\n  //       const updatedTask = { ...list, Tasks: [...Tasks, res.data] };\n  //       dispatch({\n  //         type: EDIT_TASK,\n  //         payload: res.data,\n  //       });\n  //       dispatch({\n  //         type: EDIT_LIST,\n  //         payload: updatedTask,\n  //       });\n  //       dispatch(createMessage({ addList: 'Task Updated' }));\n  //     });\n  // }\n  // dispatch({\n  //   type: DRAG_HAPPENED,\n  //   payload: {\n  //     droppableIdStart,\n  //     droppableIdEnd,\n  //     droppableIndexStart,\n  //     droppableIndexEnd,\n  //     draggableId,\n  //     type,\n  //   },\n  // });\n  // dispatch({\n  //   type: EDIT_MOVED_LIST,\n  //   payload: { draggableId, updatedList },\n  // });\n  dispatch({\n    type: DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      draggableId,\n      type,\n    },\n  });\n};\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/EditTaskModal.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/EditListModal.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateEditList.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/reducers/lists.js",["230","231","232"],"/* eslint-disable no-shadow */\nimport { faLessThanEqual } from '@fortawesome/free-solid-svg-icons';\nimport {\n  GET_LISTS,\n  GET_LISTSTASKS,\n  ADD_LIST,\n  EDIT_LIST,\n  EDIT_MOVED_LIST,\n  EDIT_LIST_TASK,\n  DELETE_LIST,\n  DELETE_LIST_TASK,\n  CLEAR_LISTS,\n  POST_ERROR,\n  DRAG_HAPPENED,\n} from '../actions/types';\n\nconst initialState = {\n  lists: [],\n  isLoading: false,\n  errors: {},\n};\n\nconst lists = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LISTS:\n      return {\n        ...state,\n        onlyLists: action.payload,\n        isLoading: false,\n        errors: {},\n      };\n    case GET_LISTSTASKS:\n      return {\n        ...state,\n        lists: action.payload,\n        isLoading: false,\n        errors: {},\n      };\n    case ADD_LIST:\n    case EDIT_LIST:\n      console.log('addedit list action.payload', action.payload);\n      // console.log('addedit list action.payload', {\n      //   lists: [\n      //     ...state.lists.filter((list) => list.id !== action.payload.id),\n      //     action.payload,\n      //   ],\n      // });\n      // console.log('addedit list action.payload', {\n      //   lists: [...action.payload.list, action.payload.Tasks],\n      // });\n      // console.log('addedit list action.payload', {\n      //   lists: [...state.lists, action.payload],\n      // });\n      return {\n        ...state,\n        lists: [...state.lists, action.payload],\n        isLoading: false,\n        errors: {},\n      };\n    case EDIT_MOVED_LIST: {\n      // const { draggableId, updatedList } = action.payload;\n      console.log('wesh la edit moved list', action.payload);\n      const { draggableId, updatedList } = action.payload;\n      const { id } = draggableId;\n      return {\n        ...state,\n        lists: [...state.lists, updatedList],\n        isLoading: false,\n        errors: {},\n      };\n    }\n    case EDIT_LIST_TASK:\n      console.log('edit task action.payload', action.payload);\n      return {\n        ...state,\n        lists: [\n          ...state.lists.filter((list) => list.id !== action.payload.id),\n          action.payload,\n        ],\n        isLoading: false,\n        errors: {},\n      };\n    case DELETE_LIST:\n      console.log('delete list action.payload', action.payload);\n      return {\n        ...state,\n        lists: state.lists.filter((list) => list.id !== action.payload),\n        errors: {},\n      };\n    case DELETE_LIST_TASK:\n      console.log('delete task action.payload', action.payload);\n      return {\n        ...state,\n        lists: [\n          ...state.lists.filter((list) => list.id !== action.payload.id),\n          action.payload,\n        ],\n        errors: {},\n      };\n    case CLEAR_LISTS:\n      return {\n        ...state,\n        lists: [],\n        errors: {},\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        isLoading: true,\n        errors: action.payload,\n      };\n    case DRAG_HAPPENED: {\n      console.log('action payload drag', action.payload);\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type,\n        // editedList,\n      } = action.payload;\n\n      const newState = { ...state };\n\n      // dragging lists around\n      if (type === 'list') {\n        // console.log('index start', state.lists.splice(droppableIndexStart, 1));\n        const list = newState.lists.splice(droppableIndexStart, 1);\n        newState.lists.splice(droppableIndexEnd, 0, ...list);\n\n        console.log('wakanda', state.lists);\n        return newState;\n        // return {\n        //   ...state,\n        //   // lists: [...state.lists],\n        //   isLoading: false,\n        //   errors: {},\n        // };\n      }\n\n      // same list\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.lists.find((list) => droppableIdStart === list.id);\n        const task = list.Tasks.splice(droppableIndexStart, 1);\n        list.Tasks.splice(droppableIndexEnd, 0, ...task);\n        // return state;\n        return {\n          ...state,\n          // lists: [\n          //   ...state.lists.filter(\n          //     (list) => list[droppableIdStart],\n          //     action.payload.list\n          //   ),\n          //   action.payload,\n          // ],\n          // isLoading: false,\n          // errors: {},\n        };\n      }\n\n      // other list\n      if (droppableIdStart !== droppableIdEnd) {\n        // find the list where the drag happened\n        const listStart = state.lists.find(\n          (list) => droppableIdStart === list.id\n        );\n        // pull out the task from this list\n        const task = listStart.Tasks.splice(droppableIndexStart, 1);\n        // find the list where the drag ended\n        const listEnd = state.lists.find((list) => droppableIdEnd === list.id);\n\n        // put the card in the new list\n        listEnd.Tasks.splice(droppableIndexEnd, 0, ...task);\n      }\n\n      return newState;\n\n      // return {\n      //   ...state,\n      //   // [droppableIdStart]: listStart,\n      //   // [droppableIdEnd]: listEnd,\n      // };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default lists;\n","/Users/ekphrasis/P_CDA/checklist_client/src/reducers/tasks.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/reducers/errors.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/reducers/messages.js",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/NavbarModal.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/EditList.jsx",["233"],"/* eslint-disable consistent-return */\n/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons';\nimport { deleteList } from '../actions/lists';\n\nconst EditListModal = ({ deleteList, listId }) => {\n  console.log('tatayuyu', listId);\n\n  // const history = useHistory();\n\n  async function submit() {\n    // deleteList(listId, history);\n    deleteList(listId);\n  }\n\n  return (\n    <>\n      <div className=\"editlist-modal-box\">\n        <FontAwesomeIcon icon={faTrashAlt} />\n        <p>Do you really want to delete the list?</p>\n        <button type=\"submit\" className=\"delete-item-button\" onClick={submit}>\n          Delete the list\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  lists: state.lists.lists,\n});\n\nexport default connect(mapStateToProps, { deleteList })(EditListModal);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateAddItem.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/List.jsx",["234","235"],"/* eslint-disable no-shadow */\n/* eslint-disable no-constant-condition */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable camelcase */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons';\nimport { getListsTasks, editList } from '../../actions/lists';\n\nimport useForm from '../customedhooks/useForm';\nimport validate from '../validators/validateEditList';\n\nimport AddItemButton from '../buttons/AddItemButton';\n// import AddTaskButton from '../buttons/AddTaskButton';\nimport EditListModal from './EditListModal';\nimport Task from './Task';\n\nconst List = ({ auth, list, editList, getListsTasks, index }) => {\n  // const [toDash, setToDash] = useState(false);\n  console.log('index mystere', index);\n  console.log('etetetetete', list);\n  const { id, name, user_id } = list;\n  const modalRef = useRef();\n\n  const openModal = () => {\n    modalRef.current.openModal();\n  };\n\n  const [toggle, setToggle] = useState(true);\n  // const [text, setText] = useState(list.name);\n  // useEffect(() => {\n  //   getTasks();\n  //   console.log('inside', list.id);\n  // }, []);\n  // console.log('kiwi', list.id);\n\n  function toggleInput() {\n    setToggle(false);\n  }\n\n  const initialState = {\n    name: '' ? '' : name,\n  };\n\n  const { handleChange, handleSubmit, values, errors } = useForm(\n    initialState,\n    validate,\n    submitEditList\n  );\n\n  console.log('hoothoot', values);\n\n  const onKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === 'Escape') {\n      setToggle(true);\n      event.preventDefault();\n      event.stopPropagation();\n      submitEditList();\n    }\n  };\n\n  async function submitEditList() {\n    editList({ list_id: id, name: values.name, user_id });\n  }\n\n  useEffect(() => {\n    getListsTasks(auth.user.id);\n  }, []);\n\n  // function refreshPage() {\n  //   window.location.reload();\n  // }\n\n  return (\n    <>\n      <Draggable draggableId={String(id)} index={index}>\n        {(provided) => (\n          <div\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            className=\"dashboard__container-lists-list\"\n          >\n            <Droppable droppableId={String(id)} type=\"task\">\n              {(provided) => (\n                <>\n                  <div className=\"dashboard__container-lists-list-header\">\n                    {toggle ? (\n                      <h3 onDoubleClick={toggleInput}>{name}</h3>\n                    ) : (\n                      <form\n                        onSubmit={handleSubmit}\n                        noValidate\n                        className=\"edit-listname-container-form\"\n                      >\n                        <label htmlFor=\"name\">\n                          <input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            value={values.name || ''}\n                            onChange={handleChange}\n                            onBlur={handleSubmit}\n                            onKeyDown={onKeyDown}\n                            // onClick={() => refreshPage()}\n                          />\n                          {errors.name && (\n                            <p className=\"error\">{errors.name}</p>\n                          )}\n                        </label>\n                      </form>\n                    )}\n                    <FontAwesomeIcon\n                      icon={faEllipsisH}\n                      nature=\"ellipse\"\n                      onMouseDown={openModal}\n                    />\n                    <EditListModal ref={modalRef} listId={id} />\n                  </div>\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {list.Tasks.map((task, index) => (\n                      <Task\n                        key={task.id}\n                        index={index}\n                        id={task.id}\n                        task={task}\n                        list={list}\n                      />\n                    ))}\n                    {provided.placeholder}\n                    <AddItemButton text=\"task\" listId={id} list={list}>\n                      task\n                    </AddItemButton>\n                  </div>\n                </>\n              )}\n            </Droppable>\n          </div>\n        )}\n      </Draggable>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  // tasks: state.tasks.tasks,\n  lists: state.lists.lists,\n  // onlyLists: state.lists.onlyLists,\n});\n\nexport default connect(mapStateToProps, { editList, getListsTasks })(List);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/layout/Task.jsx",["236"],"/* eslint-disable no-shadow */\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPenNib } from '@fortawesome/free-solid-svg-icons';\n\nimport EditTaskModal from './EditTaskModal';\n\nconst Task = (Tasks) => {\n  // console.log('cest quoi index', Tasks.index);\n  const modalRef = useRef();\n  console.log('ya quoi dans Tasks', Tasks);\n\n  const openModal = () => {\n    modalRef.current.openModal();\n  };\n  return (\n    // <Draggable draggableId={Tasks.task.id} index={index}>\n    <Draggable draggableId={String(Tasks.task.id)} index={Tasks.index}>\n      {(provided) => (\n        // <div\n        //   ref={provided.innerRef}\n        //   {...provided.draggableProps}\n        //   {...provided.dragHandleProps}\n        // >\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className=\"dashboard__container-lists-list-card\"\n        >\n          <div className=\"dashboard__container-lists-list-card-header\">\n            <h3>{Tasks.task.name}</h3>\n            <FontAwesomeIcon\n              icon={faPenNib}\n              nature=\"pen\"\n              onClick={openModal}\n              className=\"dashboard__container-lists-list-card-header-edit\"\n            />\n            <EditTaskModal ref={modalRef} task={Tasks} />\n          </div>\n          <div className=\"dashboard__container-lists-list-card-description\">\n            <p>{Tasks.task.description}</p>\n          </div>\n        </div>\n        // </div>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  // tasks: state.tasks.tasks,\n  lists: state.lists.lists,\n});\n\nexport default connect(mapStateToProps)(Task);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/buttons/AddTaskButton.jsx",["237"],"/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateAddTask.jsx",[],"/Users/ekphrasis/P_CDA/checklist_client/src/components/EditTask.jsx",["238"],"/* eslint-disable consistent-return */\n/* eslint-disable no-constant-condition */\n/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons';\n\nimport useForm from './customedhooks/useForm';\nimport validate from './validators/validateEditTask';\nimport { editTask, deleteTask } from '../actions/tasks';\n\nconst EditTask = ({ tasks, list, auth, editTask, deleteTask, messages }) => {\n  console.log('user', auth);\n  console.log('full list', list);\n  console.log('full tasks', tasks);\n  console.log('lissst id', tasks.list_id);\n  console.log('taesks', tasks.name);\n  const initialState = {\n    id: '' ? '' : tasks.id,\n    name: '' ? '' : tasks.name,\n    description: '' ? '' : tasks.description,\n    priority_id: '' ? '' : tasks.priority_id,\n    list_id: '' ? '' : tasks.list_id,\n  };\n\n  const { handleChange, handleSubmit, values, errors } = useForm(\n    initialState,\n    validate,\n    submit\n  );\n\n  async function submit() {\n    editTask(\n      {\n        user_id: auth.user.id,\n        id: tasks.id,\n        name: values.name,\n        description: values.description,\n        priority_id: values.priority_id,\n        list_id: tasks.list_id,\n      },\n      list\n    );\n  }\n\n  async function submitDelete() {\n    deleteTask(tasks.id, tasks, list);\n  }\n\n  return (\n    <>\n      <form\n        onSubmit={handleSubmit}\n        noValidate\n        className=\"edittask-modal-box-body\"\n      >\n        <label htmlFor=\"name\">\n          Task name:\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            onChange={handleChange}\n            value={values.name || ''}\n          />\n          {errors.name && <p className=\"error\">{errors.name}</p>}\n        </label>\n        <label htmlFor=\"description\">\n          Task description:\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            id=\"description\"\n            className=\"edittask-modal-box-body-form-box\"\n            onChange={handleChange}\n            value={values.description || ''}\n          />\n          {errors.description && <p className=\"error\">{errors.description}</p>}\n        </label>\n        <label htmlFor=\"priority\">\n          Priority:\n          <input\n            type=\"text\"\n            name=\"priority\"\n            id=\"priority\"\n            onChange={handleChange}\n            value={values.priority_id || ''}\n          />\n          {errors.priority_id && <p className=\"error\">{errors.priority_id}</p>}\n        </label>\n        <button type=\"submit\" value=\"editTask\" className=\"edit-items-buttons\">\n          <p>Update the task</p>\n        </button>\n      </form>\n      <div className=\"edittask-modal-box-body-delete\">\n        <span className=\"edittask-modal-box-body-delete-title\">\n          <FontAwesomeIcon icon={faTrashAlt} />\n          <h3>Delete Task</h3>\n        </span>\n        <p>Or do you really want to delete the task permanently?</p>\n        <button\n          type=\"submit\"\n          className=\"delete-item-button\"\n          onClick={submitDelete}\n        >\n          <p>Delete the task</p>\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  messages: state.messages.state,\n});\n\nexport default connect(mapStateToProps, { editTask, deleteTask })(EditTask);\n","/Users/ekphrasis/P_CDA/checklist_client/src/components/validators/validateEditTask.jsx",[],{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":15,"column":8,"nodeType":"255","messageId":"256","endLine":15,"endColumn":14},{"ruleId":"253","severity":1,"message":"257","line":25,"column":47,"nodeType":"255","messageId":"256","endLine":25,"endColumn":56},{"ruleId":"253","severity":1,"message":"258","line":2,"column":17,"nodeType":"255","messageId":"256","endLine":2,"endColumn":25},{"ruleId":"253","severity":1,"message":"259","line":2,"column":27,"nodeType":"255","messageId":"256","endLine":2,"endColumn":33},{"ruleId":"260","severity":1,"message":"261","line":34,"column":6,"nodeType":"262","endLine":34,"endColumn":28,"suggestions":"263"},{"ruleId":"239","replacedBy":"264"},{"ruleId":"241","replacedBy":"265"},{"ruleId":"243","replacedBy":"266"},{"ruleId":"245","replacedBy":"267"},{"ruleId":"247","replacedBy":"268"},{"ruleId":"249","replacedBy":"269"},{"ruleId":"251","replacedBy":"270"},{"ruleId":"253","severity":1,"message":"258","line":5,"column":17,"nodeType":"255","messageId":"256","endLine":5,"endColumn":25},{"ruleId":"253","severity":1,"message":"271","line":66,"column":7,"nodeType":"255","messageId":"256","endLine":66,"endColumn":11},{"ruleId":"260","severity":1,"message":"272","line":111,"column":6,"nodeType":"262","endLine":111,"endColumn":8,"suggestions":"273"},{"ruleId":"253","severity":1,"message":"274","line":4,"column":10,"nodeType":"255","messageId":"256","endLine":4,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":68,"column":5,"nodeType":"277","messageId":"278","endLine":83,"endColumn":6},{"ruleId":"253","severity":1,"message":"279","line":11,"column":3,"nodeType":"255","messageId":"256","endLine":11,"endColumn":13},{"ruleId":"253","severity":1,"message":"280","line":1,"column":17,"nodeType":"255","messageId":"256","endLine":1,"endColumn":26},{"ruleId":"253","severity":1,"message":"281","line":14,"column":3,"nodeType":"255","messageId":"256","endLine":14,"endColumn":14},{"ruleId":"253","severity":1,"message":"282","line":15,"column":3,"nodeType":"255","messageId":"256","endLine":15,"endColumn":13},{"ruleId":"253","severity":1,"message":"283","line":11,"column":3,"nodeType":"255","messageId":"256","endLine":11,"endColumn":17},{"ruleId":"253","severity":1,"message":"284","line":12,"column":3,"nodeType":"255","messageId":"256","endLine":12,"endColumn":18},{"ruleId":"253","severity":1,"message":"285","line":14,"column":3,"nodeType":"255","messageId":"256","endLine":14,"endColumn":14},{"ruleId":"253","severity":1,"message":"282","line":15,"column":3,"nodeType":"255","messageId":"256","endLine":15,"endColumn":13},{"ruleId":"253","severity":1,"message":"286","line":156,"column":11,"nodeType":"255","messageId":"256","endLine":156,"endColumn":16},{"ruleId":"253","severity":1,"message":"287","line":2,"column":10,"nodeType":"255","messageId":"256","endLine":2,"endColumn":25},{"ruleId":"253","severity":1,"message":"288","line":64,"column":15,"nodeType":"255","messageId":"256","endLine":64,"endColumn":17},{"ruleId":"253","severity":1,"message":"289","line":119,"column":9,"nodeType":"255","messageId":"256","endLine":119,"endColumn":20},{"ruleId":"253","severity":1,"message":"258","line":3,"column":17,"nodeType":"255","messageId":"256","endLine":3,"endColumn":25},{"ruleId":"253","severity":1,"message":"274","line":6,"column":10,"nodeType":"255","messageId":"256","endLine":6,"endColumn":18},{"ruleId":"260","severity":1,"message":"290","line":72,"column":6,"nodeType":"262","endLine":72,"endColumn":8,"suggestions":"291"},{"ruleId":"253","severity":1,"message":"258","line":2,"column":17,"nodeType":"255","messageId":"256","endLine":2,"endColumn":25},{"ruleId":"253","severity":1,"message":"274","line":5,"column":10,"nodeType":"255","messageId":"256","endLine":5,"endColumn":18},{"ruleId":"253","severity":1,"message":"258","line":4,"column":17,"nodeType":"255","messageId":"256","endLine":4,"endColumn":25},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"lines-around-directive",["294"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'Alerts' is defined but never used.","Identifier","unusedVar","'setValues' is assigned a value but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["295"],["292"],["293"],["294"],[],[],[],[],"'rank' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.user.id', 'getLists', 'getListsTasks', and 'getTasks'. Either include them or remove the dependency array. If 'getLists' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["296"],"'Redirect' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'GET_ERRORS' is defined but never used.","'useEffect' is defined but never used.","'CLEAR_TASKS' is defined but never used.","'POST_ERROR' is defined but never used.","'EDIT_LIST_TASK' is defined but never used.","'EDIT_MOVED_LIST' is defined but never used.","'CLEAR_LISTS' is defined but never used.","'Tasks' is assigned a value but never used.","'faLessThanEqual' is defined but never used.","'id' is assigned a value but never used.","'draggableId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.user.id' and 'getListsTasks'. Either include them or remove the dependency array. If 'getListsTasks' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["297"],"no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"304","text":"305"},"Update the dependencies array to be: [auth.user.id, getLists, getListsTasks, getTasks]",{"range":"306","text":"307"},"Update the dependencies array to be: [auth.user.id, getListsTasks]",{"range":"308","text":"309"},[758,780],"[callback, errors, isSubmitting]",[2684,2686],"[auth.user.id, getLists, getListsTasks, getTasks]",[2033,2035],"[auth.user.id, getListsTasks]"]